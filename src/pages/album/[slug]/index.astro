---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import type { Album, Store } from "../../../markket/index.d";
import { IconChevronsLeft } from "@tabler/icons-react";
import {
  BlocksRenderer,
  type BlocksContent,
} from "@strapi/blocks-react-renderer";

export interface Props {
  slug: string;
  album: CollectionEntry<"albums">;
}

export async function getStaticPaths() {
  const albums = await getCollection("albums");
  const stores = await getCollection("store");
  const store = stores?.[0]?.data as Store;

  const postResult = albums.map((album) => ({
    params: {
      slug: album.data.slug,
    },
    props: {
      album: album?.data,
      store,
    },
  }));

  return [...postResult];
}

const { album, store } = Astro.props as { album: Album; store: Store };
---

<Layout store={store} page={{ Title: album.title } as any} SEO={album?.SEO}>
  <div class="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800">
    <!-- Hero Section -->
    <div class="relative pt-20 pb-16 px-4">
      <div class="mb-8">
        <a
          href={`/`}
          class="text-gray-400 hover:text-white transition-colors inline-flex items-center gap-2"
        >
          <IconChevronsLeft size={16} />
          Back to home
        </a>
      </div>
      <div class="max-w-6xl mx-auto">
        <div class="flex flex-col md:flex-row gap-8 items-center">
          <!-- Album Cover -->
          <div
            class="w-64 h-64 md:w-80 md:h-80 flex-shrink-0 group relative overflow-hidden rounded-lg"
          >
            <img
              src={album.cover?.url}
              alt={album.title}
              class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
            />
            <div
              class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity"
            >
            </div>
          </div>

          <!-- Album Info -->
          <div class="flex-1 text-white">
            <h1
              class="text-4xl md:text-5xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400"
            >
              {album.title}
            </h1>
            {
              album.description && (
                <p class="text-gray-300 text-lg mb-6 max-w-2xl leading-relaxed">
                  {album.description}
                </p>
              )
            }
            <div class="flex flex-wrap gap-6 text-sm text-gray-400">
              <div class="flex items-center gap-2">
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                  >
                  </path>
                </svg>
                <span>
                  {album.tracks?.length || 0}
                  {album.slug?.replace(/-.*/, "")}
                </span>
              </div>
              <div class="flex items-center gap-2">
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                  >
                  </path>
                </svg>
                <span>{store?.title}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Album Content Section */}
    {
      album.content && (
        <div class="relative z-10 py-8 px-4">
          <div class="max-w-4xl mx-auto">
            <div
              class="prose prose-lg prose-invert max-w-none text-gray-300
                  prose-headings:text-white prose-headings:font-bold
                  prose-a:text-blue-400 hover:prose-a:text-blue-300
                  prose-strong:text-white
                  prose-img:rounded-xl prose-img:shadow-lg"
            >
              <BlocksRenderer content={album.content as BlocksContent} />
            </div>
          </div>
        </div>
      )
    }
    <!-- Photo Grid -->
    <div class="max-w-6xl mx-auto px-4 pb-20">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          album.tracks?.map((photo, index) => (
            <div class="group relative overflow-hidden rounded-xl bg-white/10 backdrop-blur-sm">
              {photo.media?.[0]?.url && (
                <div class="aspect-[4/3] overflow-hidden">
                  <a href={`/album/${album.slug}/${photo.slug}`}>
                    <img
                      src={photo.media[0].url}
                      alt={photo.title}
                      class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                    />
                  </a>
                </div>
              )}
              <div class="p-4">
                <h3 class="text-white font-medium text-lg mb-2">
                  <a href={`/album/${album.slug}/${photo.slug}`}>
                    {photo.title}
                  </a>
                </h3>
                {photo.description && (
                  <p class="text-gray-400 text-sm line-clamp-2">
                    <a href={`/album/${album.slug}/${photo.slug}`}>
                      {photo.description}
                    </a>
                  </p>
                )}
                {photo.urls && photo.urls.length > 0 && (
                  <div class="flex gap-2 mt-4">
                    {photo.urls.map((url) => (
                      <a
                        href={url.URL}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="px-3 py-1 rounded-full text-sm bg-white/10 hover:bg-white/20 text-white transition-colors"
                      >
                        {url.Label}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>
