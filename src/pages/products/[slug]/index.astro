---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import type { Store, Product, Page } from "../../../markket/index.d";
import Markdown from "../../../components/content.md";
import { IconChevronsLeft, IconShoppingCart } from "@tabler/icons-react";

export interface Props {
  store: Store;
  product: Product;
  page: Page;
}

export async function getStaticPaths() {
  const products = await getCollection("products");
  const stores = await getCollection("store");
  const store = stores?.[0]?.data as any as Store;
  const pages = await getCollection("pages");
  const productsPage = pages.find((page) => page.data.slug === "products")
    ?.data as any as Page;

  return products.map((product) => ({
    params: { slug: product.data.slug },
    props: { product: product.data, store, page: productsPage },
  }));
}

const { product, store, page } = Astro.props;
---

<Layout store={store} SEO={product?.SEO}>
  <div class="min-h-screen bg-gradient-to-b from-gray-50 to-white">
    <!-- Navigation -->
    <div
      class="fixed top-0 left-0 right-0 bg-white/80 backdrop-blur-lg z-50 border-b border-gray-200"
    >
      <div class="max-w-7xl mx-auto px-4 py-4">
        <a
          href="/products"
          class="text-gray-600 hover:text-blue-600 transition-colors inline-flex items-center gap-2 group"
        >
          <IconChevronsLeft
            size={16}
            className="group-hover:-translate-x-1 transition-transform"
          />
          <span>Back to {page?.Title || "products"}</span>
        </a>
      </div>
    </div>

    <div class="relative pt-24 pb-16">
      <div class="max-w-7xl mx-auto px-4">
        <div class="grid lg:grid-cols-2 gap-12">
          <div class="space-y-6">
            {
              product.Thumbnail?.url && (
                <div class="rounded-2xl overflow-hidden shadow-2xl">
                  <img
                    src={product.Thumbnail.url}
                    alt={product.Name}
                    class="w-full h-auto"
                  />
                </div>
              )
            }
            {
              product?.Slides?.length && (
                <div class="grid grid-cols-3 gap-4">
                  {product.Slides.map((slide) => (
                    <div class="rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-shadow cursor-pointer">
                      <img
                        src={slide.url}
                        alt={product.Name}
                        class="w-full h-32 object-cover hover:scale-105 transition-transform duration-300"
                      />
                    </div>
                  ))}
                </div>
              )
            }
          </div>

          {/* Right Column - Product Details */}
          <div class="space-y-8">
            {/* Tags */}
            {
              product.Tag && product.Tag.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {product.Tag.map((tag) => (
                    <span
                      class="px-3 py-1 text-sm rounded-full"
                      style={
                        tag.Color
                          ? `background-color: ${tag.Color}20; color: ${tag.Color}`
                          : "background-color: #e5e7eb; color: #374151"
                      }
                    >
                      {tag.Label}
                    </span>
                  ))}
                </div>
              )
            }

            {/* Product Info */}
            <div>
              <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
                {product.Name}
              </h1>
              <div class="flex items-baseline gap-4 mb-6">
                <span class="text-3xl font-bold text-blue-600">
                  ${product.usd_price}{" "}
                  {(product?.PRICES?.length || 0) > 1 && <>+</>}
                </span>
              </div>
              <div class="prose prose-lg text-gray-600">
                <Markdown
                  markdown_string={product.Description as string}
                  className="blocks-content"
                />
              </div>
            </div>

            <div class="flex gap-4">
              <a
                href={product.SEO?.metaUrl || "#"}
                target="_blank"
                rel="noopener noreferrer"
                class="flex-1 inline-flex items-center justify-center px-8 py-4 text-lg font-medium text-white bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl hover:opacity-90 transition-opacity"
              >
                <IconShoppingCart size={20} className="mr-2" />
                Buy in {new URL(product?.SEO?.metaUrl as string).hostname}
              </a>
              <button
                class="p-4 rounded-xl border border-gray-200 hover:border-gray-300 transition-colors"
                aria-label="Add to wishlist"
              >
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
