---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import type { Store, Event } from "../../../markket/index.d";
import Markdown from "../../../components/content.md";
import { IconChevronsLeft, IconCalendar, IconMapPin, IconTicket } from "@tabler/icons-react";

export interface Props {
  store: Store;
  event: Event;
}

export async function getStaticPaths() {
  const events = await getCollection("events");
  const stores = await getCollection("store");
  const store = stores?.[0]?.data as any as Store;

  return events.map((event) => ({
    params: { slug: event.data.slug },
    props: { event: event.data, store },
  }));
}

const { event, store } = Astro.props;

// Format dates
const startDate = new Date(event.startDate);
const endDate = new Date(event.endDate);
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
    year: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
  }).format(date);
};
---

<Layout store={store} page={{ Title: event.Name } as any} SEO={event?.SEO}>
  <div class="min-h-screen bg-gradient-to-b from-gray-50 to-white">
    <!-- Navigation -->
    <div class="fixed top-0 left-0 right-0 bg-white/80 backdrop-blur-lg z-50 border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 py-4">
        <a
          href="/events"
          class="text-gray-600 hover:text-blue-600 transition-colors inline-flex items-center gap-2 group"
        >
          <IconChevronsLeft size={16} class="group-hover:-translate-x-1 transition-transform" />
          <span>Back to Events</span>
        </a>
      </div>
    </div>

    <!-- Hero Section -->
    <div class="relative pt-24 pb-16">
      <div class="max-w-7xl mx-auto px-4">
        <div class="grid lg:grid-cols-2 gap-12">
          {/* Left Column - Image */}
          <div>
            {event.Thumbnail?.url && (
              <div class="rounded-2xl overflow-hidden shadow-2xl">
                <img
                  src={event.Thumbnail.url}
                  alt={event.Name}
                  class="w-full h-auto"
                />
              </div>
            )}
          </div>

          {/* Right Column - Event Details */}
          <div class="space-y-8">
            {/* Tags */}
            {event.Tag && event.Tag.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {event.Tag.map((tag) => (
                  <span
                    class="px-3 py-1 text-sm rounded-full"
                    style={tag.Color ?
                      `background-color: ${tag.Color}20; color: ${tag.Color}` :
                      "background-color: #e5e7eb; color: #374151"
                    }
                  >
                    {tag.Label}
                  </span>
                ))}
              </div>
            )}

            <div>
              <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
                {event.Name}
              </h1>
              <div>
                <Markdown
                  markdown_string={event?.Description}
                  className="blocks-content "
                />
              </div>
            </div>

            <div class="grid gap-4">

              <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
                <div class="flex items-start gap-4">
                  <div class="p-3 bg-blue-50 text-blue-600 rounded-lg">
                    <IconCalendar size={24} />
                  </div>
                  <div>
                    <h3 class="font-semibold text-gray-900 mb-1">Date & Time</h3>
                    <p class="text-gray-600">
                      {formatDate(startDate)}
                      {startDate.toDateString() !== endDate.toDateString() && (
                        <span> - {formatDate(endDate)}</span>
                      )}
                    </p>
                  </div>
                </div>
              </div>

              {/* Price */}
              <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
                <div class="flex items-start gap-4">
                  <div class="p-3 bg-green-50 text-green-600 rounded-lg">
                    <IconTicket size={24} />
                  </div>
                  <div>
                    <h3 class="font-semibold text-gray-900 mb-1">Price</h3>
                    <p class="text-gray-600">
                      {event.usd_price === 0 ? "Free Entry" : `$${event.usd_price}`}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {event.SEO?.metaUrl && (
              <div class="pt-4">
                <a
                  href={event.SEO.metaUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center justify-center w-full md:w-auto px-8 py-4 text-lg font-medium text-white bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl hover:opacity-90 transition-opacity"
                >
                  Register Now
                  <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </a>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>

    {event.Slides && event.Slides.length > 0 && (
      <div class="bg-gray-50 py-20">
        <div class="max-w-7xl mx-auto px-4">
          <h2 class="text-3xl font-bold text-gray-900 mb-12 text-center">Event Gallery</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {event.Slides.map((slide) => (
              <div class="rounded-xl overflow-hidden shadow-lg">
                <img
                  src={slide.url}
                  alt={event.Name}
                  class="w-full h-64 object-cover"
                />
              </div>
            ))}
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>
